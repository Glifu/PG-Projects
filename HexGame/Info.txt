Hex
Klasyczny wariant gry Hex rozgrywany jest na heksagonalnej planszy o rozmiarach 11 x 11:

Zasady gry są następujące:

    Rozgrywka jest prowadzona przez dwóch graczy (czerwonego i niebieskiego).
    Rozpoczynającym jest gracz czerwony.
    Gracze wykonują kolejno ruchy polegające na postawieniu pionka swojego koloru na dowolnym, dotychczas nie zajętym polu.
    Ten z graczy, który połączy ciągłą linią dwa brzegi planszy własnego koloru wygrywa.

Więcej informacji na temat tej gry można znaleźć tutaj
Wejście
Ciąg przypadków testowych, każdy z nich zaczyna się rysunkiem zawartości planszy oraz serią zapytań. Rozmiar planszy może wahać się od 1 do 11. Obecność pionka koloru czerwonego (gracz rozpoczynający) oznaczono literą: "r", a niebieskiego literą "b". Przykładowe plansze mogą wyglądać następująco:

1.)  ---
    < r >
     ---
4.)           ---
           --<   >--
        --< b >-<   >--
     --< r >-<   >-<   >--
    < b >-< b >-<   >-< r >
     --<   >-< r >-< b >--
        --<   >-< r >--
           --<   >--
              ---
11.)                               ---
                                --<   >--
                             --<   >-< b >--
                          --<   >-<   >-<   >--
                       --<   >-<   >-<   >-<   >--
                    --<   >-<   >-<   >-< b >-< r >--
                 --<   >-<   >-<   >-<   >-<   >-< r >--
              --<   >-<   >-<   >-<   >-< r >-<   >-<   >--
           --< b >-< r >-< r >-<   >-<   >-< b >-<   >-< b >--
        --<   >-<   >-<   >-<   >-< r >-<   >-<   >-< b >-<   >--
     --<   >-< b >-< r >-< r >-< r >-< b >-<   >-<   >-<   >-< r >--
    < b >-<   >-<   >-<   >-<   >-<   >-< b >-<   >-<   >-<   >-< r >
     --< r >-<   >-< b >-< b >-< b >-<   >-<   >-<   >-< b >-< r >--
        --<   >-< r >-< r >-<   >-< b >-< r >-<   >-<   >-<   >--
           --< r >-< b >-<   >-< r >-<   >-<   >-<   >-<   >--
              --<   >-< r >-<   >-<   >-<   >-<   >-<   >--
                 --<   >-< r >-< b >-<   >-< r >-< b >--
                    --< r >-< r >-<   >-<   >-< r >--
                       --<   >-<   >-<   >-< b >--
                          --<   >-<   >-<   >--
                             --<   >-<   >--
                                --< b >--
                                   ---

Zapytanie może mieć następującą postać:

    (8 %) BOARD_SIZE - (przykładowe wejście - test 1)
    (8 %) PAWNS_NUMBER - (przykładowe wejście - test 2)
    (8 %) IS_BOARD_CORRECT - (przykładowe wejście - test 3)
    (20 %) IS_GAME_OVER - (przykładowe wejście - test 4)
    (20 %) IS_BOARD_POSSIBLE - (przykładowe wejście - test 5)
    (20 %) CAN_RED_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
    CAN_BLUE_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
    CAN_RED_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT
    CAN_BLUE_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT - (przykładowe wejście - test 6)
    (16 %) CAN_RED_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
    CAN_BLUE_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
    CAN_RED_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT
    CAN_BLUE_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT - (przykładowe wejście - test 7)

Wyjście
Ciąg odpowiedzi, przynajmniej jedna na każdy przypadek testowy, rozdzielonych białym znakiem. Możliwe odpowiedzi dla każdego z przypadków testowych są następujące:

    BOARD_SIZE - liczba z przedziału <1;11> określająca rozmiar planszy. (przykładowe wyjście - test 1)
    PAWNS_NUMBER - liczba z przedziału <0;121> określająca liczbę pionów obydwu graczy znajdującą się na planszy. (przykładowe wyjście - test 2)
    IS_BOARD_CORRECT - odpowiedź w postaci YES/NO oznaczająca czy stan planszy jest poprawny, innymi słowy czy liczba pionów jednego z graczy jest odpowiednia w stosunku liczby pionów drugiego gracza. (przykładowe wyjście - test 3)
    IS_GAME_OVER - odpowiedź w postaci YES RED/YES BLUE/NO oznaczająca, czy (i jeśli tak, to który) z graczy zakończył rozgrywkę, czy połączył dwa należące do niego boki planszy nieprzerwaną ścieżką swojego koloru. (przykładowe wyjście - test 4)
    IS_BOARD_POSSIBLE odpowiedź w postaci YES/NO oznaczająca, czy stan planszy jest możliwy. Oznacza to, że plansza jest poprawna i że osiągnięcie takiego stanu nie oznaczało przeoczenia wcześniejszej wygranej jednego z graczy. (przykładowe wyjście - test 5)
    CAN_RED_WIN_IN_N_MOVE_WITH_NAIVE_OPPONENT (...) - odpowiedź w postaci YES/NO oznaczająca, czy jeden z graczy może w N (gdzie N należy do <1;2>) posunięciach zakończyć rozgrywkę grając z naiwnym przeciwnikiem (wykonującym najgorsze możliwe dla siebie posunięcia). Liczba posunięć N oznacza liczbę posunięć gracza, dla którego rozpatrujemy wygraną. Wygrana musi nastąpić w N-tym posunięciu co oznacza, że gracz musi mieć możliwość wykonania takiej liczby posunięć.
    Przykładowo, jeśli sprawdzamy czy gracz czerwony może wygrać w N = 2 posunięciach i aktualny ruch należy do gracza niebieskiego, to obydwaj gracze wykonają dwa posunięcia. W przypadku gdy aktualny ruch należy do gracza czerwonego to gracz czerwony wykona dwa posunięcia a niebieski tylko jedno. (przykładowe wyjście - test 6)
    CAN_RED_WIN_IN_N_MOVE_WITH_PERFECT_OPPONENT (...) - analogiczny przypadek do poprzedniego z tą różnicą, że gracz sprawdza czy może zakończyć rozgrywkę grając z doskonałym przeciwnikiem (wykonującym najlepsze możliwe dla siebie posunięcia) w N (gdzie N należy do <1;2>) posunięciach. (przykładowe wyjście - test 7)

Jeśli gracz wygrywa w jednym posunięciu to nie oznacza, że automatycznie wygrywa w dwóch posunięciach. W przypadku kiedy gra z graczem doskonałym i jeśli nie wykona w pierwszym swoim ruchu jedynego posunięcia które prowadzi do jego wygranej to przeciwnik w kolejnym posunięciu może mu je zablokować (patrz: ciekawy przypadek nr. 3). Zakładamy, że gracz zawsze gra optymalnie tak aby wygrać w posunięciu o które pytamy (w pierwszym albo drugim), jego przeciwnik gra tak aby wygrać jak najszybciej zatem jeśli może wygrać w pierwszym posunięciu to to zrobi.

Jeśli gracz X wygrywa w N posunięciach z graczem doskonałym Y to Y nie wygrywa nigdy z X (w żadnej możliwej liczbie posunięć).

Uwaga !!! - dla przypadków od trzeciego do siódmego, jeśli stan planszy jest niepoprawny (IS_BOARD_CORRECT) algorytm zawsze powinien zwrócić: NO.

Dla ostatnich dwóch przypadków można zastosować algorytm Mini-Max. Dla danej pozycji należy wygenerować wszystkie posunięcia 1-szego gracza a później wszystkie odpowiedzi jego przeciwnika i tak dalej. Maksymalnie takie drzewo może się zagłębić na 4 poziomy (przypadek kiedy rozpatrujemy 2 posunięcia gracza do którego nie należy posunięcie). Trzeba mieć oczywiście zaimplementowany generator wszystkich możliwych posunięć generujący tablicę/listę kolejnych stanów gry z dodanym nowym pionkiem i zmienionym aktualnym graczem oraz detektor końca rozgrywki (jak gracz połączy obydwa końce planszy).
Ciekawe przypadki:
1.

       ---
    --< r >--
 --< b >-<   >--
<   >-< b >-<   >
 --<   >-< r >--
    --< r >--
       ---
CAN_RED_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT   -> NO
CAN_BLUE_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT  -> NO
CAN_RED_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT  -> NO
CAN_BLUE_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT -> YES

Czerwonemu brakuje jednego pionka do wygranej a niebieskiemu dwóch. Gracz niebieski rozpoczyna i blokuje wygraną czerwonego.

       ---
    --< r >--
 --< b >-< b >--
<   >-< b >-<   >
 --<   >-< r >--
    --< r >--
       ---

Teraz niebieskiemu brakuje tylko jednego pionka do wygranej a czerwony nie może go zablokować. Oznacza to, że czerwony wygrywa w 2 posunięciach.

2.

       ---
    --< b >--
 --< b >-< b >--
< r >-< b >-< r >
 --< r >-<   >--
    --< r >--
       ---
CAN_RED_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT   -> NO
CAN_BLUE_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT  -> NO
CAN_RED_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT  -> NO
CAN_BLUE_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT -> NO

Gra jest zakończona, wygrał czerwony zatem nie można już analizować kolejnych posunięć. Czerwony nie może zatem wygrać w jednym posunięciu. Dotyczy to obydwu przypadków (gracza doskonałego i naiwnego).

3.

       ---
    --<   >--
 --< b >-<   >--
< b >-< r >-<   >
 --< r >-<  >--
    --< r >--
       --- 
CAN_RED_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT   -> NO
CAN_BLUE_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT  -> YES
CAN_RED_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT  -> NO
CAN_BLUE_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT -> NO

Czerwonemu i niebieskiemu brakuje jednego pionka do wygrania. Gracz niebieski rozpoczyna i wygrywa w jednym posunięciu.

       ---
    --< b >--
 --< b >-<   >--
< b >-< r >-<   >
 --< r >-<  >--
    --< r >--
       --- 

Wcale nie oznacza to, że niebieski może wygrać w dwóch posunięciach. Niebieski wykonując dowolny inny ruch, taki aby nie wygrać w pierwszym posunięciu, przegrywa. Załóżmy, że wykonał poniższe posunięcie.

       ---
    --<   >--
 --< b >-< b >--
< b >-< r >-<   >
 --< r >-<   >--
    --< r >--
       ---

To czerwony jako, że gra optymalnie wygrywa wykonując posunięcie:

       ---
    --< r >--
 --< b >-< b >--
< b >-< r >-<   >
 --< r >-<   >--
    --< r >--
       --- 



4.

                      ---
                   --<   >--
                --< b >-<   >--
             --<   >-< b >-< r >--
          --< b >-< b >-< r >-<   >--
       --< b >-<   >-< b >-< b >-< r >--
    --< r >-< r >-< r >-< b >-< b >-< r >--
 --< b >-< r >-< r >-< b >-<   >-< r >-< b >--
< r >-< b >-< b >-< r >-< b >-< b >-<   >-< r >
 --< b >-< r >-< r >-<   >-< r >-< r >-< b >--
    --< r >-< r >-< r >-< b >-< b >-< b >--
       --< r >-< b >-< r >-< r >-< r >--
          --< r >-<   >-< b >-<   >--
             --< b >-< r >-< r >--
                --< b >-<   >--
                   --< b >--
                      --- 

CAN_RED_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT   -> NO
CAN_BLUE_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT  -> NO
CAN_RED_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT  -> NO
CAN_BLUE_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT -> YES

Aktualny ruch należy do gracza niebieskiego i wykonuje on posunięcie oznaczone *. Teraz ma on możliwość zakończenia ruchu na trzy sposoby: 1, 2 lub 3. Czerwony nie może zablokować tych trzech pól jednym pionem. Mógłby temu zapobiec tylko wtedy gdyby sam mógł zakończyć grę po pierwszym ruchu niebieskiego. Niestety nie dysponuje takim ruchem, zatem niebieski wygrywa w dwóch posunięciach.

                      ---
                   --< 1 >--
                --< b >-< 2 >--
             --<   >-< b >-< r >--
          --< b >-< b >-< r >-< 3 >--
       --< b >-<   >-< b >-< b >-< r >--
    --< r >-< r >-< r >-< b >-< b >-< r >--
 --< b >-< r >-< r >-< b >-< >-< r >-< b >--
< r >-< b >-< b >-< r >-< b >-< b >-<   >-< r >
 --< b >-< r >-< r >-<   >-< r >-< r >-< b >--
    --< r >-< r >-< r >-< b >-< b >-< b >--
       --< r >-< b >-< r >-< r >-< r >--
          --< r >-<   >-< b >-<   >--
             --< b >-< r >-< r >--
                --< b >-< * >--
                   --< b >--
                      --- 

Przykład

Wejście

 ---
<   >
 ---
BOARD_SIZE

PAWNS_NUMBER

IS_BOARD_CORRECT

IS_GAME_OVER

IS_BOARD_POSSIBLE

CAN_RED_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT

CAN_RED_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT

    ---
 --<   >--
<   >-<   >
 --<   >--
    ---
BOARD_SIZE

PAWNS_NUMBER

IS_BOARD_CORRECT

IS_GAME_OVER

IS_BOARD_POSSIBLE

CAN_RED_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT

CAN_RED_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT

    ---
 --< r >--
<   >-<   >
 --<   >--
    ---
BOARD_SIZE

PAWNS_NUMBER

IS_BOARD_CORRECT

IS_GAME_OVER

IS_BOARD_POSSIBLE

CAN_RED_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT

CAN_RED_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT

    ---
 --< b >--
<   >-< r >
 --<   >--
    ---
BOARD_SIZE

PAWNS_NUMBER

IS_BOARD_CORRECT

IS_GAME_OVER

IS_BOARD_POSSIBLE

CAN_RED_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT

CAN_RED_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT

    ---
 --< r >--
< r >-< b >
 --<   >--
    ---
BOARD_SIZE

PAWNS_NUMBER

IS_BOARD_CORRECT

IS_GAME_OVER

IS_BOARD_POSSIBLE

CAN_RED_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT

CAN_RED_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT

       ---
    --<   >--
 --< b >-<   >--
< b >-< r >-<   >
 --< r >-<   >--
    --< r >--
       ---
BOARD_SIZE

PAWNS_NUMBER

IS_BOARD_CORRECT

IS_GAME_OVER

IS_BOARD_POSSIBLE

CAN_RED_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT

CAN_RED_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT

       ---
    --<   >--
 --< b >-< b >--
< r >-< r >-<   >
 --< r >-<   >--
    --<   >--
       ---
BOARD_SIZE

PAWNS_NUMBER

IS_BOARD_CORRECT

IS_GAME_OVER

IS_BOARD_POSSIBLE

CAN_RED_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT

CAN_RED_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT

       ---
    --<   >--
 --<   >-< b >--
<   >-< r >-< b >
 --< r >-< b >--
    --< r >--
       ---
BOARD_SIZE

PAWNS_NUMBER

IS_BOARD_CORRECT

IS_GAME_OVER

IS_BOARD_POSSIBLE

CAN_RED_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT

CAN_RED_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT

          ---
       --< b >--
    --< r >-< b >--
 --< r >-< r >-< b >--
< b >-< b >-< r >-< b >
 --< r >-< b >-< b >--
    --< r >-< r >--
       --< r >--
          ---
BOARD_SIZE

PAWNS_NUMBER

IS_BOARD_CORRECT

IS_GAME_OVER

IS_BOARD_POSSIBLE

CAN_RED_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT

CAN_RED_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT

                               ---
                            --<   >--
                         --<   >-<   >--
                      --<   >-<   >-<   >--
                   --< r >-<   >-<   >-< b >--
                --<   >-<   >-<   >-<   >-<   >--
             --<   >-< r >-<   >-<   >-< b >-<   >--
          --<   >-<   >-< r >-<   >-< b >-<   >-<   >--
       --<   >-<   >-<   >-< r >-< b >-<   >-<   >-<   >--
    --<   >-<   >-<   >-<   >-<   >-<   >-<   >-<   >-<   >--
 --<   >-<   >-<   >-<   >-<   >-<   >-<   >-<   >-<   >-<   >--
<   >-<   >-<   >-<   >-<   >-<   >-<   >-<   >-<   >-<   >-<   >
 --<   >-<   >-<   >-<   >-< b >-< r >-<   >-<   >-<   >-<   >--
    --<   >-<   >-<   >-< b >-<   >-<   >-<   >-<   >-<   >--
       --<   >-<   >-<   >-<   >-< r >-<   >-<   >-<   >--
          --<   >-<   >-< b >-<   >-< r >-<   >-<   >--
             --<   >-<   >-<   >-<   >-<   >-<   >--
                --<   >-< b >-<   >-< r >-<   >--
                   --< b >-<   >-<   >-< r >--
                      --<   >-<   >-<   >--
                         --<   >-<   >--
                            --<   >--
                               ---
BOARD_SIZE

PAWNS_NUMBER

IS_BOARD_CORRECT

IS_GAME_OVER

IS_BOARD_POSSIBLE

CAN_RED_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_NAIVE_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_NAIVE_OPPONENT

CAN_RED_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_1_MOVE_WITH_PERFECT_OPPONENT
CAN_RED_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT
CAN_BLUE_WIN_IN_2_MOVES_WITH_PERFECT_OPPONENT

Wyjście

1

0

YES

NO

YES

YES
NO
NO
NO

YES
NO
NO
NO

2

0

YES

NO

YES

NO
NO
YES
YES

NO
NO
YES
NO

2

1

YES

NO

YES

YES
NO
NO
YES

YES
NO
NO
NO

2

2

YES

NO

YES

NO
YES
NO
NO

NO
YES
NO
NO

2

3

YES

NO

YES

NO
YES
NO
NO

NO
YES
NO
NO

3

5

YES

NO

YES

YES
YES
YES
YES

NO
YES
NO
NO

3

5

YES

NO

YES

YES
NO
YES
YES

YES
NO
NO
NO

3

6

YES

NO

YES

YES
NO
NO
NO

YES
NO
NO
NO

4

16

YES

YES RED

NO

NO
NO
NO
NO

NO
NO
NO
NO

11

18

YES

NO

YES

NO
NO
YES
YES

NO
NO
YES
NO

